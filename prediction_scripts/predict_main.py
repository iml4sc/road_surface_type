#!/usr/bin/env python
"""
(1) Loads a GeoPose JSON (generated by csv_to_json.py or any other source).
(2) For each GeoPose item, extracts info and loads the corresponding image.
(3) Automatically determines input size if Inception v3 is detected.
(4) Runs inference with the loaded model.
(5) Converts the result to a TDML JSON.
(6) Saves each TDML JSON file in the output directory.
"""
"""
Example:
python predict_main.py \
    --geopose-json input/input_geopose.json \
    --model-path /tank/dataset_public/road_surface/results/script_incepV3_res152v2_Dec_3class_fullimg/results_resnet152v2_full/resnet152v2_model.pth \
    --output-dir prediction_results_resnet152v2 \
    --device cuda
"""


import argparse
import os
import torch

## (1) Input
from input_module import load_geopose_json
## (2) Preprocessing
from preprocessing import extract_info_from_geopose, load_and_preprocess_image
## (3) Model
from model_module import load_model, get_input_size_for_model, predict_road_surface
## (4) Postprocessing
from postprocessing import create_tdml_json
## (5) Output
from output_module import save_tdml_json


def main():
    parser = argparse.ArgumentParser(description="Road Surface Classification Prediction Pipeline")
    parser.add_argument("--geopose-json", type=str, required=True,
                        help="Path to the GeoPose JSON file (with 'geopose_list')")
    parser.add_argument("--model-path", type=str, required=True,
                        help="Path to the trained .pth model file")
    parser.add_argument("--output-dir", type=str, default="./prediction_results",
                        help="Directory to save TDML JSON outputs")
    parser.add_argument("--use-crop", action="store_true",
                        help="If set, will crop the bottom 1/3 of each image before inference")
    parser.add_argument("--device", type=str, default="cuda",
                        help="Device to use: 'cuda' or 'cpu' (default: cuda if available)")

    args = parser.parse_args()

    ## 1) Load GeoPose JSON
    geopose_list = load_geopose_json(args.geopose_json)
    print(f"[INFO] Loaded {len(geopose_list)} GeoPose items from {args.geopose_json}")

    ## 2) Load model
    device = torch.device(args.device if torch.cuda.is_available() else "cpu")
    model, model_name = load_model(args.model_path, device)
    print(f"[INFO] Model loaded: {model_name} from {args.model_path}")

    ## 3) Determine input size automatically if Inception v3
    input_size = get_input_size_for_model(model_name)
    print(f"[INFO] Using input size: {input_size} (model: {model_name})")

    ## 4) Inference for each GeoPose item
    for i, geopose_item in enumerate(geopose_list, start=1):
        # (a) Extract info
        image_path, lon, lat, valid_time = extract_info_from_geopose(geopose_item)
        # (b) Load & preprocess image
        img_tensor = load_and_preprocess_image(
            image_path=image_path,
            input_size=input_size,
            use_crop=args.use_crop
        )
        # (c) Predict
        pred_label, confidence = predict_road_surface(model, img_tensor, device)
        # (d) Postprocess => TDML JSON
        tdml_json = create_tdml_json(
            image_path=image_path,
            longitude=lon,
            latitude=lat,
            prediction_label=pred_label,
            confidence=confidence,
            valid_time=valid_time
        )
        # (e) Save each TDML JSON
        base_filename = f"prediction_{i:05d}"
        out_path = save_tdml_json(tdml_json, args.output_dir, base_filename)

        print(f"[{i}/{len(geopose_list)}] Saved TDML => {out_path}")


if __name__ == "__main__":
    main()
